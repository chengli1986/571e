<entry>
    <name>Bicubic B-spline Interoplation</name>
    <description><![CDATA[This sample demonstrates how to efficiently implement a Bicubic B-spline interpolation filter with CUDA texture.]]></description>
    <whitepaper></whitepaper>
    <minspec>SM 1.0</minspec>
    <keywords></keywords>
    <scope>1:CUDA Basic Topics,2:Texture,2:Image Processing,2:Computer Vision</scope>
    <files>
        <file>data\lena_bw.raw</file>
        <file>data\0_nearest.ppm</file>
        <file>data\1_bilinear.ppm</file>
        <file>data\2_bicubic.ppm</file>
        <file>data\3_fastbicubic.ppm</file>
        <file>data\4_catmull-rom.ppm</file>
    </files>
	<qatests>
        <qatest>-mode=0 -file=0_nearest.ppm</qatest>
        <qatest>-mode=1 -file=1_bilinear.ppm</qatest>
        <qatest>-mode=2 -file=2_bicubic.ppm</qatest>
        <qatest>-mode=3 -file=3_fastbicubic.ppm</qatest>
        <qatest>-mode=4 -file=4_catmull-rom.ppm</qatest>
    </qatests>
    <cudaapi>cudaGLSetGLDevice</cudaapi>
    <cudaapi>cudaGraphicsMapResources</cudaapi>
    <cudaapi>cudaGraphicsUnmapResources</cudaapi>
    <cudaapi>cudaGraphicsResourceGetMappedPointer</cudaapi>
    <cudaapi>cudaGraphicsRegisterResource</cudaapi>
    <cudaapi>cudaGraphicsGLRegisterBuffer</cudaapi>
    <cudaapi>cudaGraphicsUnregisterResource</cudaapi>
    
    <keyconcepts level="basic">Graphics Interop</keyconcepts>
    <keyconcepts level="basic">Image Processing</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>GLU</library>
    <library>GL</library>
    <library os="macosx" framework="true">GLUT</library>
    <library os="linux">X11</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">../../common/lib/x64</library-path>
    <library-path os="windows" arch="Win32">../../common/lib/Win32</library-path>
    <library-path os="linux" arch="x86_64">../../common/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../../common/lib/linux/i686</library-path>
    <library-path os="macosx">../../common/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="bicubicTexture_cuda.cu"></nvcc-compiler>
    <sm-arch>sm10</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>
    <sm-arch>sm50</sm-arch>
    <sm-arch>sm32</sm-arch>
    <sm-arch>sm35</sm-arch>
    

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>bicubicTexture.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
    <recipe>
        <name>bicubicTexture</name>
        <gencode>
            <sm>10</sm>
            <sm>20</sm>
            <sm>30</sm>
            <sm>32</sm>
            <sm>35</sm>
            
            <sm>50</sm>
        </gencode>
        <keywords>
            <keyword>openGL</keyword>
        </keywords>
        <supportedbuilds>
            <build>makefile</build>
        </supportedbuilds>
    </recipe>
</entry>
