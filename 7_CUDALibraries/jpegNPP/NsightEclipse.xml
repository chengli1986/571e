<entry>
    <name>JPEG encode/decode and resize with NPP</name>
    <description><![CDATA[This sample demonstrates a simple image processing pipline. First, a JPEG file is huffman decoded and inverse DCT transformed and dequantized. Then the different plances are resized. Finally, the resized image is quantized, forward DCT transformed and huffman encoded.]]></description>
    <whitepaper></whitepaper>
    <minspec>SM 2.0</minspec>
    <keywords>CUDA,NPP,JPEG,Image Processing,Image Compression</keywords>
    <scope>1:CUDA Basic Topics,1:Performance Strategies,2:Computer Vision</scope>
    <cudaapi>nppGetGpuComputeCapability</cudaapi>
    <cudaapi>nppiDCTInitAlloc</cudaapi>
    <cudaapi>nppiDecodeHuffmanScanHost_JPEG_8u16s_P3R</cudaapi>
    <cudaapi>nppiDCTQuantInv8x8LS_JPEG_16s8u_C1R_NEW</cudaapi>
    <cudaapi>nppiResizeSqrPixel_8u_C1R</cudaapi>
    <cudaapi>nppiEncodeHuffmanGetSize</cudaapi>
    <cudaapi>nppiDCTFree</cudaapi>

    <files>
        <file>..\..\common\data\Growth_of_cubic_bacteria_25x16.jpg</file>
    </files>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library>nppi</library>
    <library>nppc</library>
	<library>freeimage</library>

    <!-- Either absolute or relative to sample -->
    <library-path os="windows"></library-path>
    <library-path os="linux" arch="x86_64">../common/FreeImage/lib/linux/x86_64</library-path>
    <library-path os="linux" arch="i686">../common/FreeImage/lib/linux/i686</library-path>
    <library-path os="macosx">../common/FreeImage/lib/darwin</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
	<include-path>../common/UtilNPP/</include-path>
	<include-path>../common/FreeImage/include </include-path>
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>


    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>jpegNPP.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>
    <recipe>
        <name>jpegNPP</name>
        <libraries>
            <library>nppi</library>
            <library>nppc</library>
            <library>freeimage</library>
        </libraries>
        <librarypaths>
            <path>../common/FreeImage/lib/$(OSLOWER)</path>
            <path>../common/FreeImage/lib/$(OSLOWER)/$(OS_ARCH)</path>
        </librarypaths>
        <includepaths>
            <path>../common/UtilNPP</path>
            <path>../common/FreeImage/include</path>
        </includepaths>
        <supportedbuilds>
            <build>makefile</build>
        </supportedbuilds>
    </recipe>
</entry>
